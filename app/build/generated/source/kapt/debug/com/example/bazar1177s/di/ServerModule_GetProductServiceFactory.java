// Generated by Dagger (https://dagger.dev).
package com.example.bazar1177s.di;

import com.example.bazar1177s.network.ProductService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServerModule_GetProductServiceFactory implements Factory<ProductService> {
  private final ServerModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ServerModule_GetProductServiceFactory(ServerModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ProductService get() {
    return getProductService(module, retrofitProvider.get());
  }

  public static ServerModule_GetProductServiceFactory create(ServerModule module,
      Provider<Retrofit> retrofitProvider) {
    return new ServerModule_GetProductServiceFactory(module, retrofitProvider);
  }

  public static ProductService getProductService(ServerModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.getProductService(retrofit));
  }
}
