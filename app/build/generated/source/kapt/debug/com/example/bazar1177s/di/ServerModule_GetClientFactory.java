// Generated by Dagger (https://dagger.dev).
package com.example.bazar1177s.di;

import com.example.bazar1177s.data.pref.AppPref;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServerModule_GetClientFactory implements Factory<OkHttpClient> {
  private final ServerModule module;

  private final Provider<AppPref> prefProvider;

  public ServerModule_GetClientFactory(ServerModule module, Provider<AppPref> prefProvider) {
    this.module = module;
    this.prefProvider = prefProvider;
  }

  @Override
  public OkHttpClient get() {
    return getClient(module, prefProvider.get());
  }

  public static ServerModule_GetClientFactory create(ServerModule module,
      Provider<AppPref> prefProvider) {
    return new ServerModule_GetClientFactory(module, prefProvider);
  }

  public static OkHttpClient getClient(ServerModule instance, AppPref pref) {
    return Preconditions.checkNotNullFromProvides(instance.getClient(pref));
  }
}
