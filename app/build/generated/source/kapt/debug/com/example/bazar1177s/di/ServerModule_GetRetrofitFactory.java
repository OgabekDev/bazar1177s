// Generated by Dagger (https://dagger.dev).
package com.example.bazar1177s.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServerModule_GetRetrofitFactory implements Factory<Retrofit> {
  private final ServerModule module;

  private final Provider<OkHttpClient> clientProvider;

  public ServerModule_GetRetrofitFactory(ServerModule module,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit get() {
    return getRetrofit(module, clientProvider.get());
  }

  public static ServerModule_GetRetrofitFactory create(ServerModule module,
      Provider<OkHttpClient> clientProvider) {
    return new ServerModule_GetRetrofitFactory(module, clientProvider);
  }

  public static Retrofit getRetrofit(ServerModule instance, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.getRetrofit(client));
  }
}
